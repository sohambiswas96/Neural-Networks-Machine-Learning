#coin_vs_scrap_code:

import matplotlib.pyplot as plt
from keras.utils import to_categorical
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D, Dropout
import numpy as np
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
import os,cv2
import glob
import re
import tensorflow as tf
import random as rn 
from keras_preprocessing.image import ImageDataGenerator

os.environ['PYTHONHASHSEED'] = '0'

# Setting the seed for numpy-generated random numbers 
np.random.seed(37)

# Setting the graph-level random seed. 
tf.set_random_seed(89)

from keras import backend as K

session_conf = tf.ConfigProto( intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)

#Force Tensorflow to use a single thread 
sess = tf.Session(graph=tf.get_default_graph(), config=session_conf) 
K.set_session(sess)



def gen_image(arr):
    two_d = (np.reshape(arr, (200, 200)) * 255).astype(np.uint8)
    plt.imshow(two_d, interpolation='nearest')
    return plt

def unique(list1): 
      
    # insert the list to the set 
    list_set = set(list1) 
    # convert the set to the list 
    unique_list = (list(list_set)) 
    for x in unique_list: 
        print(x)

from google.colab import drive
drive.mount('/content/drive',force_remount=True) 

PATH = os.getcwd()
# Define data path
data_path = '/content/drive/My Drive/Colab Notebooks/Training'   

data_dir_list = os.listdir(data_path) # os.listdir(data_path)
img_rows=200
img_cols=200
num_channel=1
num_epoch=20

#defining number of classes

num_classes=2

labels_name={'SCRAP':0,'COIN':1}

img_data_list=[]
labels_list = []

for dataset in data_dir_list:
  
    img_list = glob.glob(data_path+'/'+ dataset +'/*.jpg')
    
    label = labels_name[dataset] # label is generated as the library updated above
    for img in img_list:
        input_img=cv2.imread(img,1 )
        input_img=cv2.cvtColor(input_img, cv2.COLOR_BGR2GRAY)
        input_img_resize=cv2.resize(input_img,(200,200))
        img_data_list.append(input_img_resize)
        labels_list.append(label)

#print(unique(labels_list))
img_data = np.array(img_data_list)
img_data = img_data.astype('float32')

labels = np.array(labels_list)

#print(unique(labels))
print(np.unique(labels,return_counts=True))
Y = np_utils.to_categorical(labels, num_classes)


#Shuffle the dataset
x,y = shuffle(img_data,Y, random_state=2)


X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=2) # divide data into train and test

#Normalization of the data
X_train = X_train / 255
X_test = X_test / 255

Nv = X_train.shape[0]
Nv_test = X_test.shape[0]

#reshape data to fit model
X_train = X_train.reshape(int(Nv),200,200,1)
X_test = X_test.reshape(int(Nv_test),200,200,1)

model = Sequential()
##################   add model layers described in the assignment   #######################

model.add(Conv2D(64, kernel_size=(3,3),strides=2,activation='relu',input_shape=(200,200,1)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.5))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(2, activation='softmax'))

########################################################################################

# 8. Compile model
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

#fitting model to data

#model.fit(X_train, y_train, batch_size=32, nb_epoch=20, verbose=1,shuffle=False,validation_data = (X_test, y_test))

data_generator = ImageDataGenerator(vertical_flip=True,horizontal_flip=True)
data_generator.fit(X_train)
model.fit_generator(data_generator.flow(X_train, y_train, batch_size=32),steps_per_epoch=len(X_train) // 32, epochs=20,validation_data=(X_test, y_test),verbose=1)


# 10. Evaluate model on test data
score = model.evaluate(X_test, y_test, verbose=1)

print('Testing accuracy - > ',score[1] * 100)
 
ytested = model.predict_classes(X_test)
for i in range(10):
  print("The Predicted Testing image is =%s verify below" % ((list(labels_name.keys())[list(labels_name.values()).index(ytested[i])])))
  gen_image(X_test[i]).show() # printing image vs the predicted image below
